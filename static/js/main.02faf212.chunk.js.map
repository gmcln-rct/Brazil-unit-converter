{"version":3,"sources":["languages/index.js","languages/en.js","languages/pt.js","contexts/LanguageContext.js","components/Header.js","components/UnitSelect.js","components/LanguageSelect.js","components/App.js","serviceWorker.js","index.js"],"names":["dictionaryList","en","tspbz","dspbz","sspbz","teacupbz","cupbz","tspus","tbspus","cupus","ml","convert","to","converted","chooselang","pt","languageOptions","id","text","LanguageContext","createContext","language","dictionary","LanguageContextProvider","props","languageContext","useContext","useState","setLanguage","setDictionary","provider","selectedLanguage","Provider","value","children","Text","tid","Header","className","UnitSelect","convertedVal","setConvertedVal","amount","setAmount","fromUnit","setFromUnit","toUnit","setToUnit","label","unitId","conversion","fromUnits","toUnits","useEffect","type","autoFocus","onChange","event","target","map","key","Number","isInteger","toFixed","LanguageSelect","find","item","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAGaA,EAAiB,CAC1BC,GCJO,CACPC,MAAO,gBACPC,MAAO,qBACPC,MAAO,kBACPC,SAAU,cACVC,MAAO,WACPC,MAAO,gBACPC,OAAQ,kBACRC,MAAO,WACPC,GAAI,kBACJC,QAAS,0BACTC,GAAI,KACJC,UAAW,mBACXC,WAAY,mBDRZC,GELO,CACPb,MAAO,oBACPC,MAAO,uBACPC,MAAO,kBACPC,SAAU,aACVC,MAAO,wBACPC,MAAO,yBACPC,OAAQ,sBACRC,MAAO,aACPC,GAAI,YACJC,QAAS,6BACTC,GAAI,OACJC,UAAW,mBACXC,WAAY,uBFLHE,EAAkB,CAC3B,CAAEC,GAAI,KAAMC,KAAM,WAClB,CAAED,GAAI,KAAMC,KAAM,eGLTC,EAAkBC,wBAAc,CACzCC,SAAUL,EAAgB,GAC1BM,WAAYtB,EAAegB,EAAgB,GAAGC,MAI3C,SAASM,EAAwBC,GACpC,IAAMC,EAAkBC,qBAAWP,GADQ,EAEXQ,mBAASF,EAAgBJ,UAFd,mBAEpCA,EAFoC,KAE1BO,EAF0B,OAGPD,mBAASF,EAAgBH,YAHlB,mBAGpCA,EAHoC,KAGxBO,EAHwB,KAKrCC,EAAW,CACbT,WACAC,aACAM,YAAa,SAACG,GACVH,EAAYG,GACZF,EAAc7B,EAAe+B,EAAiBd,OAItD,OACI,kBAACE,EAAgBa,SAAjB,CAA0BC,MAAOH,GAC5BN,EAAMU,UAMZ,SAASC,EAAKX,GAGjB,OAFwBE,qBAAWP,GAEZG,WAAWE,EAAMY,KClC5C,IAceC,EAdA,WAEX,OACI,yBAAKC,UAAY,kBAEb,+DACA,+BCmGGC,EAtGI,WAAO,IAAD,EACeb,qBAAWP,GAAvCG,EADa,EACbA,WADa,KACDM,YAEoBD,mBAAS,IAH5B,mBAGda,EAHc,KAGAC,EAHA,OAIOd,mBAAS,GAJhB,mBAIde,EAJc,KAINC,EAJM,OAKWhB,mBAAS,GALpB,mBAKdiB,EALc,KAKJC,EALI,OAMOlB,mBAAS,GANhB,mBAMdmB,EANc,KAMNC,EANM,OASapB,mBAAS,CACzC,CAAEqB,MAAO,gBAAiBC,OAAQ,QAASC,WAAY,GACvD,CAAEF,MAAO,qBAAsBC,OAAQ,QAASC,WAAY,IAC5D,CAAEF,MAAO,kBAAmBC,OAAQ,QAASC,WAAY,IACzD,CAAEF,MAAO,cAAeC,OAAQ,WAAYC,WAAY,KACxD,CAAEF,MAAO,WAAYC,OAAQ,QAASC,WAAY,KAClD,CAAEF,MAAO,gBAAiBC,OAAQ,QAASC,WAAY,MACvD,CAAEF,MAAO,kBAAmBC,OAAQ,SAAUC,WAAY,OAC1D,CAAEF,MAAO,WAAYC,OAAQ,QAASC,WAAY,SAClD,CAAEF,MAAO,aAAcC,OAAQ,KAAMC,WAAY,KAlB9B,mBASdC,EATc,aAqBSxB,mBAAS,CACrC,CAAEqB,MAAO,gBAAiBC,OAAQ,QAASC,WAAY,GACvD,CAAEF,MAAO,qBAAsBC,OAAQ,QAASC,WAAY,IAC5D,CAAEF,MAAO,kBAAmBC,OAAQ,QAASC,WAAY,IACzD,CAAEF,MAAO,cAAeC,OAAQ,WAAYC,WAAY,KACxD,CAAEF,MAAO,WAAYC,OAAQ,QAASC,WAAY,KAClD,CAAEF,MAAO,gBAAiBC,OAAQ,QAASC,WAAY,MACvD,CAAEF,MAAO,kBAAmBC,OAAQ,SAAUC,WAAY,OAC1D,CAAEF,MAAO,WAAYC,OAAQ,QAASC,WAAY,SAClD,CAAEF,MAAO,aAAcC,OAAQ,KAAMC,WAAY,MA9B9B,mBAqBdE,EArBc,UAsCrB,OALAC,qBAAU,WACNZ,EAAgBC,EAAQE,EAAWE,KACpC,CAACJ,EAAOE,EAAUE,IAInB,0BAAMR,UAAU,aACd,6BAASA,UAAU,eACjB,4BACE,kBAACH,EAAD,CAAMC,IAAI,aAEZ,2BACEnB,GAAG,SACH+B,MAAM,SACNM,KAAK,SACLC,WAAS,EACTtB,MAAOS,EACPc,SAAU,SAAAC,GAAK,OAAId,EAAUc,EAAMC,OAAOzB,WAG9C,iCACE,4BACEK,UAAU,cACVL,MAAOW,EACPY,SAAU,SAAAC,GAAK,OAAIZ,EAAYY,EAAMC,OAAOzB,SAE3CkB,EAAUQ,KAAI,gBAAG1B,EAAH,EAAGA,MAAOgB,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,WAAlB,OACb,4BAAQU,IAAK3B,EAAOA,MAAOiB,GAExB5B,EAAW2B,QAOlB,iCACE,4BACE,kBAACd,EAAD,CAAMC,IAAI,SAId,4BACEE,UAAU,YACVL,MAAOa,EACPU,SAAU,SAAAC,GAAK,OAAIV,EAAUU,EAAMC,OAAOzB,SAEzCmB,EAAQO,KAAI,gBAAG1B,EAAH,EAAGA,MAAOgB,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,WAAlB,OACX,4BAAQU,IAAK3B,EAAOA,MAAOiB,GACxB5B,EAAW2B,SAKpB,6BAASX,UAAU,sBACf,6BACE,4BAAI,kBAACH,EAAD,CAAMC,IAAI,gBAElB,yBAAKE,UAAU,iBACZuB,OAAOC,UAAUtB,GACdA,EACAA,EAAauB,QAAQ,OC+BtBC,EA3EQ,WAEnB,IAAMvC,EAAkBC,qBAAWP,GACZM,EAAgBJ,SAASJ,GA0BhD,OACI,6BAASqB,UAAU,mBAoBf,+CAIA,4BACIkB,SAlDiB,SAACC,GAC1B,IAAM1B,EAAmBf,EAAgBiD,MAAK,SAAAC,GAAI,OAAIA,EAAKjD,KAAOwC,EAAMC,OAAOzB,SAE/ER,EAAgBG,YAAYG,IAgDpBE,MAAOR,EAAgBJ,SAASJ,IAE/BD,EAAgB2C,KAAI,SAAAO,GAAI,OACrB,4BACIN,IAAKM,EAAKjD,GACVgB,MAAOiC,EAAKjD,IAEXiD,EAAKhD,Y,MC9FfiD,MAZf,WACE,OACE,6BACE,kBAAC5C,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNY6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.02faf212.chunk.js","sourcesContent":["import en from './en';\nimport pt from './pt';\n\nexport const dictionaryList = {\n    en,\n    pt\n};\n\nexport const languageOptions = [\n    { id: 'en', text: 'English' },\n    { id: 'pt', text: 'Portuguese' }\n];","const en = {\n    tspbz: 'Teaspoon (BZ)',\n    dspbz: 'Dessert Spoon (BZ)',\n    sspbz: 'Soup Spoon (BZ)',\n    teacupbz: 'Teacup (BZ)',\n    cupbz: 'Cup (BZ)',\n    tspus: 'Teaspoon (US)',\n    tbspus: 'Tablespoon (US)',\n    cupus: 'Cup (US)',\n    ml: 'Milliliter (ml)',\n    convert: 'Enter Amount To Convert',\n    to: 'to',\n    converted: 'Converted Amount',\n    chooselang: 'Choose Language'\n};\n\nexport default en;","const pt = {\n    tspbz: 'colher de chá ',\n    dspbz: 'colher de sobremesa ',\n    sspbz: 'colher de sopa ',\n    teacupbz: 'xícara ',\n    cupbz: 'copo de requeijão ',\n    tspus: 'colher de chá (EUA)',\n    tbspus: 'colher de sopa (EUA',\n    cupus: 'copo (EUA)',\n    ml: 'mililitro',\n    convert: 'Digite o valor a converter',\n    to: 'para',\n    converted: 'Valor convertido',\n    chooselang: 'Selecione o idioma'\n};\n\nexport default pt;","import React, { useState, createContext, useContext } from 'react';\n\nimport { languageOptions, dictionaryList } from '../languages';\n\n// Create context with default language\nexport const LanguageContext = createContext({\n    language: languageOptions[0],\n    dictionary: dictionaryList[languageOptions[0].id]\n});\n\n// Language context\nexport function LanguageContextProvider(props) {\n    const languageContext = useContext(LanguageContext);\n    const [language, setLanguage] = useState(languageContext.language);\n    const [dictionary, setDictionary] = useState(languageContext.dictionary);\n\n    const provider = {\n        language,\n        dictionary,\n        setLanguage: (selectedLanguage) => {\n            setLanguage(selectedLanguage);\n            setDictionary(dictionaryList[selectedLanguage.id]);\n        }\n    };\n\n    return (\n        <LanguageContext.Provider value={provider}>\n            {props.children}\n        </LanguageContext.Provider>\n    );\n};\n\n// Access text based on selected language\nexport function Text(props) {\n    const languageContext = useContext(LanguageContext);\n\n    return languageContext.dictionary[props.tid];\n};","import React from 'react';\n\nconst Header = () => {\n\n    return (\n        <div className = \"header-section\">\n\n            <h1>Brazilian Recipe Unit Converter</h1>\n            <h2>\n            </h2>\n        </div>\n    )\n\n\n};\n\nexport default Header;","import React, { useContext, useState, useEffect } from \"react\";\n\nimport { LanguageContext, Text } from \"../contexts/LanguageContext\";\n\n\nconst UnitSelect = () => {\n    const { dictionary, setLanguage } = useContext(LanguageContext);\n\n    const [convertedVal, setConvertedVal] = useState(1);\n    const [amount, setAmount] = useState(1);\n    const [fromUnit, setFromUnit] = useState(5);\n    const [toUnit, setToUnit] = useState(1);\n\n\n    const [fromUnits, setfromUnits] = useState([\n      { label: \"Teaspoon (BZ)\", unitId: \"tspbz\", conversion: 5 },\n      { label: \"Dessert spoon (BZ)\", unitId: \"dspbz\", conversion: 10 },\n      { label: \"Soup spoon (BZ)\", unitId: \"sspbz\", conversion: 15 },\n      { label: \"Teacup (BZ)\", unitId: \"teacupbz\", conversion: 250 },\n      { label: \"Cup (BZ)\", unitId: \"cupbz\", conversion: 240 },\n      { label: \"Teaspoon (US)\", unitId: \"tspus\", conversion: 4.92 },\n      { label: \"Tablespoon (US)\", unitId: \"tbspus\", conversion: 14.79 },\n      { label: \"Cup (US)\", unitId: \"cupus\", conversion: 240.001 },\n      { label: \"Milliliter\", unitId: \"ml\", conversion: 1 }\n    ]);\n\n    const [toUnits, setToUnits] = useState([\n      { label: \"Teaspoon (BZ)\", unitId: \"tspbz\", conversion: 5 },\n      { label: \"Dessert spoon (BZ)\", unitId: \"dspbz\", conversion: 10 },\n      { label: \"Soup spoon (BZ)\", unitId: \"sspbz\", conversion: 15 },\n      { label: \"Teacup (BZ)\", unitId: \"teacupbz\", conversion: 250 },\n      { label: \"Cup (BZ)\", unitId: \"cupbz\", conversion: 240 },\n      { label: \"Teaspoon (US)\", unitId: \"tspus\", conversion: 4.92 },\n      { label: \"Tablespoon (US)\", unitId: \"tbspus\", conversion: 14.79 },\n      { label: \"Cup (US)\", unitId: \"cupus\", conversion: 240.001 },\n      { label: \"Milliliter\", unitId: \"ml\", conversion: 1 }\n    ]);\n\n    useEffect(() => {\n        setConvertedVal(amount *fromUnit / toUnit)\n    }, [amount,fromUnit, toUnit]);\n\n \n    return (\n      <main className=\"unit-form\">\n        <section className=\"amount-span\">\n          <h1>\n            <Text tid=\"convert\" />\n          </h1>\n          <input\n            id=\"amount\"\n            label=\"Amount\"\n            type=\"number\"\n            autoFocus\n            value={amount}\n            onChange={event => setAmount(event.target.value)}\n          />\n        </section>\n        <section>\n          <select\n            className=\"select-from\"\n            value={fromUnit}\n            onChange={event => setFromUnit(event.target.value)}\n          >\n            {fromUnits.map(({ value, unitId, conversion }) => (\n              <option key={value} value={conversion}>\n                {/* {label} */}\n                {dictionary[unitId]}\n                {/* {Text tid={unitId} } */}\n\n             </option>\n            ))}\n          </select>\n\n          <section>\n            <h2>            \n              <Text tid=\"to\" />\n            </h2>\n          </section>\n\n          <select\n            className=\"select-to\"\n            value={toUnit}\n            onChange={event => setToUnit(event.target.value)}\n          >\n            {toUnits.map(({ value, unitId, conversion }) => (\n              <option key={value} value={conversion}>\n                {dictionary[unitId]}\n              </option>\n            ))}\n          </select>\n        </section>\n        <section className=\"conversion-section\">\n            <div>\n              <h2><Text tid=\"converted\" /></h2>\n            </div>\n          <div className=\"converted-val\">\n            {Number.isInteger(convertedVal)\n              ? convertedVal\n              : convertedVal.toFixed(2)}\n          </div>\n        </section>\n      </main>\n    );\n};\n\n\nexport default UnitSelect;\n","\n// import React, { useContext } from 'react';\n\n// import { languageOptions } from '../languages';\n\n// import { LanguageContext } from '../contexts/LanguageContext';\n\n// const LanguageSelect = () => {\n//     const languageContext = useContext(LanguageContext);\n\n//     const handleLanguageChange = (event) => {\n//         const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n//         // set selected language by calling context method\n//         languageContext.setLanguage(selectedLanguage);\n//     };\n\n//     return (\n//         <section className='language-select'>\n//             <h2>\n//                 Choose Language\n//             </h2>\n//             <select \n//                 onChange={handleLanguageChange}\n//                 value={languageContext.language.id}\n//             >\n//                 {languageOptions.map(item => (\n//                     <option\n//                         key={item.id}\n//                         value={item.id}\n//                     >\n//                         {item.text}\n//                     </option>\n//                 ))}\n//             </select>\n\n\n//         </section>\n\n//     );\n// };\n\n\n\n// export default LanguageSelect;\n\n\nimport React, { useContext } from 'react';\n\nimport { languageOptions } from '../languages';\n\n// import { LanguageContext } from '../contexts/LanguageContext';\n\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n\n\nconst LanguageSelect = () => {\n    \n    const languageContext = useContext(LanguageContext);\n    let selectedLanguage = languageContext.language.id;\n\n    const handleLanguageChange = (event) => {\n        const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n        // set selected language by calling context method\n        languageContext.setLanguage(selectedLanguage);\n    };\n\n\n    // const toggleLanguage = (event) => {\n    //     // const selectedLanguage = languageContext.language.id === 0? 1 : 0;\n    //     // const currLanguage = languageContext.language.id;\n    //     // const selectedLanguage = currLanguage === 'en'? 'pt' : 'en';\n    //     console.log(event.target.value==='en');\n    //     if (event.target.value === 'en') {\n    //          selectedLanguage = 'pt';\n    //     } else {\n    //          selectedLanguage = 'en';\n    //     }\n    //     console.log(selectedLanguage);\n    //     // const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n    //     // set selected language by calling context method\n    //     languageContext.setLanguage(selectedLanguage);\n    // };\n\n\n    return (\n        <section className='language-select'>\n            {/* <h2>\n                Choose Language\n            </h2>\n            <input\n                // checked={isOn}\n                onChange={toggleLanguage}\n                className=\"react-switch-checkbox\"\n                id={selectedLanguage}\n                type=\"checkbox\"\n                value={selectedLanguage}\n            />\n            <label\n                className=\"react-switch-label\"\n                htmlFor={selectedLanguage}\n                \n            >\n                <span className={`react-switch-button`} />\n            </label> */}\n\n            <h2>\n                {/* <Text tid=\"chooseLang\" /> */}\n                Choose Language\n            </h2>\n            <select\n                onChange={handleLanguageChange}\n                value={languageContext.language.id}\n            >\n                {languageOptions.map(item => (\n                    <option\n                        key={item.id}\n                        value={item.id}\n                    >\n                        {item.text}\n                    </option>\n                ))}\n            </select>\n\n\n        </section>\n\n    );\n};\n\n\nexport default LanguageSelect;","import React from 'react';\n\nimport {LanguageContextProvider} from '../contexts/LanguageContext';\n\nimport Header from './Header';\nimport UnitSelect from './UnitSelect';\nimport LanguageSelect from './LanguageSelect';\n\n\nimport '../styles/reset.css';\nimport '../styles/main.scss';\n\nfunction App() {\n  return (\n    <div>\n      <LanguageContextProvider>\n        <Header />\n        <UnitSelect />\n        <LanguageSelect />\n      </LanguageContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/styles/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}