{"version":3,"sources":["languages/index.js","languages/en.js","languages/pt.js","contexts/LanguageContext.js","components/Header.js","components/UnitSelect.js","components/App.js","serviceWorker.js","index.js"],"names":["dictionaryList","en","tspbz","dspbz","sspbz","teacupbz","cupbz","tspus","tbspus","cupus","ml","pt","languageOptions","id","text","LanguageContext","createContext","language","dictionary","LanguageContextProvider","props","languageContext","useContext","useState","setLanguage","setDictionary","provider","selectedLanguage","Provider","value","children","Header","className","UnitSelect","convertedVal","setConvertedVal","amount","setAmount","fromUnit","setFromUnit","toUnit","setToUnit","label","conversion","fromUnits","toUnits","useEffect","name","type","autoFocus","onChange","event","target","map","key","Number","isInteger","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.feec2c9e.chunk.js","sourcesContent":["import en from './en';\nimport pt from './pt';\n\nexport const dictionaryList = {\n    en,\n    pt\n};\n\nexport const languageOptions = [\n    { id: 'en', text: 'English' },\n    { id: 'pt', text: 'Portuguese' }\n];","const en = {\n    tspbz: 'Teaspoon (BZ)',\n    dspbz: 'Dessert Spoon (BZ)',\n    sspbz: 'Soup Spoon (BZ)',\n    teacupbz: 'Teacup (BZ)',\n    cupbz: 'Cup (BZ)',\n    tspus: 'Teaspoon (US)',\n    tbspus: 'Tablespoon (US)',\n    cupus: 'Cup (US)',\n    ml: 'Milliliter',\n};\n\nexport default en;","const pt = {\n    tspbz: 'colher de chá ',\n    dspbz: 'colher de sobremesa ',\n    sspbz: 'colher de sopa ',\n    teacupbz: 'xícara ',\n    cupbz: 'copo de requeijão ',\n    tspus: 'colher de chá (EUA)',\n    tbspus: 'colher de sopa (EUA',\n    cupus: 'copo (EUA)',\n    ml: 'Mililitro',\n};\n\nexport default pt;","import React, { useState, createContext, useContext } from 'react';\n\nimport { languageOptions, dictionaryList } from '../languages';\n\n// Create context with default language\nexport const LanguageContext = createContext({\n    language: languageOptions[0],\n    dictionary: dictionaryList[languageOptions[0].id]\n});\n\n// Language context\nexport function LanguageContextProvider(props) {\n    const languageContext = useContext(LanguageContext);\n    const [language, setLanguage] = useState(languageContext.language);\n    const [dictionary, setDictionary] = useState(languageContext.dictionary);\n\n    const provider = {\n        language,\n        dictionary,\n        setLanguage: (selectedLanguage) => {\n            setLanguage(selectedLanguage);\n            setDictionary(dictionaryList[selectedLanguage.id]);\n        }\n    };\n\n    return (\n        <LanguageContext.Provider value={provider}>\n            {props.children}\n        </LanguageContext.Provider>\n    );\n};\n\n// Access text based on selected language\nexport function Text(props) {\n    const languageContext = useContext(LanguageContext);\n\n    return languageContext.dictionary[props.tid];\n};","import React, {useState} from 'react';\n\nconst Header = () => {\n\nreturn (\n    <div className = \"header-section\">\n\n        <h1>Brazilian Recipe Unit Converter</h1>\n        <h2>\n        </h2>\n    </div>\n)\n\n\n};\n\nexport default Header;","import React, { useContext, useState, useEffect } from \"react\";\n\nimport { LanguageContext, Text } from \"../contexts/LanguageContext\";\n\n\nconst UnitSelect = () => {\n    // const { dictionary, setLanguage } = useContext(LanguageContext);\n\n    const [convertedVal, setConvertedVal] = useState(1);\n    const [amount, setAmount] = useState(1);\n    const [fromUnit, setFromUnit] = useState(5);\n    const [toUnit, setToUnit] = useState(1);\n\n    const [fromUnits, setfromUnits] = useState([\n      { label: \"Teaspoon (BZ)\", value: \"teabz\", conversion: 5 },\n      { label: \"Dessert spoon (BZ)\", value: \"dspbz\", conversion: 10 },\n      { label: \"Soup spoon (BZ)\", value: \"sspbz\", conversion: 15 },\n      { label: \"Teacup (BZ)\", value: \"teacupbz\", conversion: 250 },\n      { label: \"Cup (BZ)\", value: \"cupbz\", conversion: 240 },\n      { label: \"Teaspoon (US)\", value: \"tspus\", conversion: 4.92 },\n      { label: \"Tablespoon (US)\", value: \"tbspus\", conversion: 14.79 },\n      { label: \"Cup (US)\", value: \"cupus\", conversion: 240.001 },\n      { label: \"Milliliter\", value: \"ml\", conversion: 1 }\n    ]);\n\n    const [toUnits, setToUnits] = useState([\n      { label: \"Teaspoon (BZ)\", value: \"teabz\", conversion: 5 },\n      { label: \"Dessert spoon (BZ)\", value: \"dspbz\", conversion: 10 },\n      { label: \"Soup spoon (BZ)\", value: \"sspbz\", conversion: 15 },\n      { label: \"Teacup (BZ)\", value: \"teacupbz\", conversion: 250 },\n      { label: \"Cup (BZ)\", value: \"cupbz\", conversion: 240 },\n      { label: \"Teaspoon (US)\", value: \"tspus\", conversion: 4.92 },\n      { label: \"Tablespoon (US)\", value: \"tbspus\", conversion: 14.79 },\n      { label: \"Cup (US)\", value: \"cupus\", conversion: 240.001 },\n      { label: \"Milliliter\", value: \"ml\", conversion: 1 }\n    ]);\n\n    useEffect(() => {\n        setConvertedVal(amount *fromUnit / toUnit)\n    }, [amount,fromUnit, toUnit]);\n\n\n\n    return (\n        <main className=\"unit-form\">\n\n                    <section className='amount-span'>\n                        <h2>Enter Amount To Convert</h2>\n                    <input\n                        id=\"amount\"\n                        label=\"Amount\"\n                        name=\"tsp-bz\"\n                        type='number'\n\n                        autoFocus\n                        value={amount}\n                        onChange={event => setAmount(event.target.value)}\n                    />\n\n\n                    </section>\n                    <section>\n                        <select\n                            className=\"select-from\"\n                            value={fromUnit}\n                            onChange={event => setFromUnit(event.target.value)}\n                        >\n\n                        {fromUnits.map(({ label, value, conversion }) => (\n                            <option key={value} value={conversion}>\n                                {label}\n                                {/* <Text tid=\"value\" /> */}\n                                {/* {Text.tid} */}\n                            </option>\n                        ))}\n\n                        </select>\n\n                        <div> to </div>\n\n\n                        <select\n                            className=\"select-to\"\n                            value={toUnit}\n                            onChange={event => setToUnit(event.target.value)}\n                        >\n                            {toUnits.map(({ label, value, conversion }) => (\n                                <option key={value} value={conversion}>\n                                    {label}\n                                </option>\n                            ))}\n\n                        </select>\n\n                    </section>\n                    <section>\n                        <h2>\n                            Conversion: \n                        </h2>\n                        <span className='converted-val'>{(Number.isInteger(convertedVal) ? convertedVal: convertedVal.toFixed(2))}</span>\n                    </section>\n\n        </main>\n    );\n};\n\n\nexport default UnitSelect;\n","import React from 'react';\n\nimport {LanguageContextProvider} from '../contexts/LanguageContext';\n\nimport Header from './Header';\nimport UnitSelect from './UnitSelect';\nimport LanguageSelect from './LanguageSelect';\n\n\nimport '../styles/reset.css';\nimport '../styles/main.scss';\n\nfunction App() {\n  return (\n    <div>\n      <LanguageContextProvider>\n        <Header />\n        <UnitSelect />\n        {/* <LanguageSelect /> */}\n      </LanguageContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/styles/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}