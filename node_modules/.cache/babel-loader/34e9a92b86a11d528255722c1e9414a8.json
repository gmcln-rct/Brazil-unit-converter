{"ast":null,"code":"var _jsxFileName = \"/Users/kawabata/Desktop/currentprojects/bz-unit-converter/brasil-unit-converter/src/contexts/UnitContext.js\";\nimport React, { createContext, useState } from 'react';\nimport uuid from 'uuid/v1';\nexport const LanguageContext = createContext();\n\nconst LanguageContextProvider = props => {\n  const [Languages, setLanguages] = useState([{\n    selectedInputType: \"teaspoon\",\n    selectedOutputType: \"teaspoon\",\n    inputValue: \"\",\n    conversions: [\"Brazilian\"],\n    Languages: [{\n      name: \"teaspoon\",\n      type: \"liquid\",\n      conversions: [{\n        inputType: \"teaspoon\",\n        conversion: x => x\n      }, {\n        inputType: \"dessert spoon\",\n        conversion: x => x / 12\n      }, {\n        inputType: \"soup spoon\",\n        conversion: x => x * 3\n      }, {\n        inputType: \"cup (Brazilian)\",\n        conversion: x => x / 30.54\n      }]\n    }]\n  }]);\n  return React.createElement(LanguageContext.Provider, {\n    value: {\n      Languages\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default LanguageContextProvider;","map":{"version":3,"sources":["/Users/kawabata/Desktop/currentprojects/bz-unit-converter/brasil-unit-converter/src/contexts/UnitContext.js"],"names":["React","createContext","useState","uuid","LanguageContext","LanguageContextProvider","props","Languages","setLanguages","selectedInputType","selectedOutputType","inputValue","conversions","name","type","inputType","conversion","x","children"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,OAAO,MAAMC,eAAe,GAAGH,aAAa,EAArC;;AAEP,MAAMI,uBAAuB,GAAIC,KAAD,IAAW;AAEvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CACvC;AACIO,IAAAA,iBAAiB,EAAE,UADvB;AAEIC,IAAAA,kBAAkB,EAAE,UAFxB;AAGIC,IAAAA,UAAU,EAAE,EAHhB;AAIIC,IAAAA,WAAW,EAAE,CAAC,WAAD,CAJjB;AAKIL,IAAAA,SAAS,EAAE,CACP;AACIM,MAAAA,IAAI,EAAE,UADV;AAEIC,MAAAA,IAAI,EAAE,QAFV;AAGIF,MAAAA,WAAW,EAAE,CACT;AACIG,QAAAA,SAAS,EAAE,UADf;AAEIC,QAAAA,UAAU,EAAGC,CAAD,IAAOA;AAFvB,OADS,EAKT;AACIF,QAAAA,SAAS,EAAE,eADf;AAEIC,QAAAA,UAAU,EAAGC,CAAD,IAAOA,CAAC,GAAG;AAF3B,OALS,EAST;AACIF,QAAAA,SAAS,EAAE,YADf;AAEIC,QAAAA,UAAU,EAAGC,CAAD,IAAOA,CAAC,GAAG;AAF3B,OATS,EAaT;AACIF,QAAAA,SAAS,EAAE,iBADf;AAEIC,QAAAA,UAAU,EAAGC,CAAD,IAAOA,CAAC,GAAG;AAF3B,OAbS;AAHjB,KADO;AALf,GADuC,CAAD,CAA1C;AAuCA,SACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEV,MAAAA;AAAF,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACY,QADX,CADJ;AAKH,CA9CD;;AAgDA,eAAeb,uBAAf","sourcesContent":["\nimport React, { createContext, useState } from 'react';\nimport uuid from 'uuid/v1';\n\nexport const LanguageContext = createContext();\n\nconst LanguageContextProvider = (props) => {\n\n    const [Languages, setLanguages] = useState([\n        {\n            selectedInputType: \"teaspoon\",\n            selectedOutputType: \"teaspoon\",\n            inputValue: \"\",\n            conversions: [\"Brazilian\"],\n            Languages: [\n                {\n                    name: \"teaspoon\",\n                    type: \"liquid\",\n                    conversions: [\n                        {\n                            inputType: \"teaspoon\",\n                            conversion: (x) => x\n                        },\n                        {\n                            inputType: \"dessert spoon\",\n                            conversion: (x) => x / 12\n                        },\n                        {\n                            inputType: \"soup spoon\",\n                            conversion: (x) => x * 3\n                        },\n                        {\n                            inputType: \"cup (Brazilian)\",\n                            conversion: (x) => x / 30.54\n                        },\n                        \n\n                    ]\n                },\n                \n\n            ]\n        }\n    ]);\n\n\n\n    return (\n        <LanguageContext.Provider value={{ Languages }}>\n            {props.children}\n        </LanguageContext.Provider>\n    );\n}\n\nexport default LanguageContextProvider;\n\n"]},"metadata":{},"sourceType":"module"}