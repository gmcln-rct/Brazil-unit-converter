{"ast":null,"code":"var _jsxFileName = \"/Users/kawabata/Desktop/currentprojects/bz-unit-converter/brasil-unit-converter/src/components/LanguageSelect.js\";\n// import React, { useContext } from 'react';\n// import { languageOptions } from '../languages';\n// import { LanguageContext } from '../contexts/LanguageContext';\n// const LanguageSelect = () => {\n//     const languageContext = useContext(LanguageContext);\n//     const handleLanguageChange = (event) => {\n//         const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n//         // set selected language by calling context method\n//         languageContext.setLanguage(selectedLanguage);\n//     };\n//     return (\n//         <section className='language-select'>\n//             <h2>\n//                 Choose Language\n//             </h2>\n//             <select \n//                 onChange={handleLanguageChange}\n//                 value={languageContext.language.id}\n//             >\n//                 {languageOptions.map(item => (\n//                     <option\n//                         key={item.id}\n//                         value={item.id}\n//                     >\n//                         {item.text}\n//                     </option>\n//                 ))}\n//             </select>\n//         </section>\n//     );\n// };\n// export default LanguageSelect;\nimport React, { useContext } from 'react';\nimport { languageOptions } from '../languages';\nimport { LanguageContext } from '../contexts/LanguageContext';\n\nconst LanguageSelect = () => {\n  const languageContext = useContext(LanguageContext);\n  let selectedLanguage = languageContext.language.id; // const handleLanguageChange = (event) => {\n  //     const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n  //     // set selected language by calling context method\n  //     languageContext.setLanguage(selectedLanguage);\n  // };\n\n  const handleLanguageChange = event => {\n    // const selectedLanguage = languageContext.language.id === 0? 1 : 0;\n    const selectedLanguage = languageOptions.find(item => item.id === event.target.value); // set selected language by calling context method\n\n    languageContext.setLanguage(selectedLanguage);\n  };\n\n  const toggleLanguage = event => {\n    // const selectedLanguage = languageContext.language.id === 0? 1 : 0;\n    const currLanguage = languageContext.language.id; // const selectedLanguage = currLanguage === 'en'? 'pt' : 'en';\n\n    console.log(event.target.value === 'en');\n\n    if (event.target.value === 'en') {\n      selectedLanguage = 'pt';\n    } else {\n      selectedLanguage = 'en';\n    }\n\n    console.log(selectedLanguage); // const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n    // set selected language by calling context method\n\n    languageContext.setLanguage(selectedLanguage);\n  };\n\n  return React.createElement(\"section\", {\n    className: \"language-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Choose Language\"), React.createElement(\"input\", {\n    // checked={isOn}\n    onChange: toggleLanguage,\n    className: \"react-switch-checkbox\",\n    id: languageContext.language.id,\n    type: \"checkbox\",\n    value: languageContext.language.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"react-switch-label\" // htmlFor={languageContext.language.id}\n    ,\n    Larry: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: `react-switch-button`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })));\n};\n\nexport default LanguageSelect;","map":{"version":3,"sources":["/Users/kawabata/Desktop/currentprojects/bz-unit-converter/brasil-unit-converter/src/components/LanguageSelect.js"],"names":["React","useContext","languageOptions","LanguageContext","LanguageSelect","languageContext","selectedLanguage","language","id","handleLanguageChange","event","find","item","target","value","setLanguage","toggleLanguage","currLanguage","console","log"],"mappings":";AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAIA;AAGA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,eAAT,QAAgC,cAAhC;AAEA,SAASC,eAAT,QAAgC,6BAAhC;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,eAAe,GAAGJ,UAAU,CAACE,eAAD,CAAlC;AACA,MAAIG,gBAAgB,GAAGD,eAAe,CAACE,QAAhB,CAAyBC,EAAhD,CAFyB,CAIzB;AACA;AACA;AACA;AACA;;AAEA,QAAMC,oBAAoB,GAAIC,KAAD,IAAW;AACpC;AACA,UAAMJ,gBAAgB,GAAGJ,eAAe,CAACS,IAAhB,CAAqBC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYE,KAAK,CAACG,MAAN,CAAaC,KAAtD,CAAzB,CAFoC,CAGpC;;AACAT,IAAAA,eAAe,CAACU,WAAhB,CAA4BT,gBAA5B;AACH,GALD;;AAOA,QAAMU,cAAc,GAAIN,KAAD,IAAW;AAC9B;AACA,UAAMO,YAAY,GAAGZ,eAAe,CAACE,QAAhB,CAAyBC,EAA9C,CAF8B,CAG9B;;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACG,MAAN,CAAaC,KAAb,KAAqB,IAAjC;;AACA,QAAIJ,KAAK,CAACG,MAAN,CAAaC,KAAb,KAAuB,IAA3B,EAAiC;AAC5BR,MAAAA,gBAAgB,GAAG,IAAnB;AACJ,KAFD,MAEO;AACFA,MAAAA,gBAAgB,GAAG,IAAnB;AACJ;;AACDY,IAAAA,OAAO,CAACC,GAAR,CAAYb,gBAAZ,EAV8B,CAW9B;AACA;;AACAD,IAAAA,eAAe,CAACU,WAAhB,CAA4BT,gBAA5B;AACH,GAdD;;AAiBA,SACI;AAAS,IAAA,SAAS,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAII;AACI;AACA,IAAA,QAAQ,EAAEU,cAFd;AAGI,IAAA,SAAS,EAAC,uBAHd;AAII,IAAA,EAAE,EAAEX,eAAe,CAACE,QAAhB,CAAyBC,EAJjC;AAKI,IAAA,IAAI,EAAC,UALT;AAMI,IAAA,KAAK,EAAEH,eAAe,CAACE,QAAhB,CAAyBC,EANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAYI;AACI,IAAA,SAAS,EAAC,oBADd,CAEI;AAFJ;AAGI,IAAA,KAAK,MAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI;AAAM,IAAA,SAAS,EAAG,qBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CAZJ,CADJ;AA0CH,CA5ED;;AA+EA,eAAeJ,cAAf","sourcesContent":["\n// import React, { useContext } from 'react';\n\n// import { languageOptions } from '../languages';\n\n// import { LanguageContext } from '../contexts/LanguageContext';\n\n// const LanguageSelect = () => {\n//     const languageContext = useContext(LanguageContext);\n\n//     const handleLanguageChange = (event) => {\n//         const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n//         // set selected language by calling context method\n//         languageContext.setLanguage(selectedLanguage);\n//     };\n\n//     return (\n//         <section className='language-select'>\n//             <h2>\n//                 Choose Language\n//             </h2>\n//             <select \n//                 onChange={handleLanguageChange}\n//                 value={languageContext.language.id}\n//             >\n//                 {languageOptions.map(item => (\n//                     <option\n//                         key={item.id}\n//                         value={item.id}\n//                     >\n//                         {item.text}\n//                     </option>\n//                 ))}\n//             </select>\n\n\n//         </section>\n\n//     );\n// };\n\n\n\n// export default LanguageSelect;\n\n\nimport React, { useContext } from 'react';\n\nimport { languageOptions } from '../languages';\n\nimport { LanguageContext } from '../contexts/LanguageContext';\n\nconst LanguageSelect = () => {\n    const languageContext = useContext(LanguageContext);\n    let selectedLanguage = languageContext.language.id;\n\n    // const handleLanguageChange = (event) => {\n    //     const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n    //     // set selected language by calling context method\n    //     languageContext.setLanguage(selectedLanguage);\n    // };\n\n    const handleLanguageChange = (event) => {\n        // const selectedLanguage = languageContext.language.id === 0? 1 : 0;\n        const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n        // set selected language by calling context method\n        languageContext.setLanguage(selectedLanguage);\n    };\n\n    const toggleLanguage = (event) => {\n        // const selectedLanguage = languageContext.language.id === 0? 1 : 0;\n        const currLanguage = languageContext.language.id;\n        // const selectedLanguage = currLanguage === 'en'? 'pt' : 'en';\n        console.log(event.target.value==='en');\n        if (event.target.value === 'en') {\n             selectedLanguage = 'pt';\n        } else {\n             selectedLanguage = 'en';\n        }\n        console.log(selectedLanguage);\n        // const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n        // set selected language by calling context method\n        languageContext.setLanguage(selectedLanguage);\n    };\n\n\n    return (\n        <section className='language-select'>\n            <h2>\n                Choose Language\n            </h2>\n            <input\n                // checked={isOn}\n                onChange={toggleLanguage}\n                className=\"react-switch-checkbox\"\n                id={languageContext.language.id}\n                type=\"checkbox\"\n                value={languageContext.language.id}\n            />\n            <label\n                className=\"react-switch-label\"\n                // htmlFor={languageContext.language.id}\n                Larry\n            >\n                <span className={`react-switch-button`} />\n            </label>\n\n            {/* <h2>\n                Choose Language\n            </h2>\n            <select\n                onChange={handleLanguageChange}\n                value={languageContext.language.id}\n            >\n                {languageOptions.map(item => (\n                    <option\n                        key={item.id}\n                        value={item.id}\n                    >\n                        {item.text}\n                    </option>\n                ))}\n            </select> */}\n\n\n        </section>\n\n    );\n};\n\n\nexport default LanguageSelect;"]},"metadata":{},"sourceType":"module"}