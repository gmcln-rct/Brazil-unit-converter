{"ast":null,"code":"var _jsxFileName = \"/Users/kawabata/Desktop/currentprojects/bz-unit-converter/brasil-unit-converter/src/contexts/LanguageContext.js\";\nimport React, { createContext, useState } from 'react';\nimport uuid from 'uuid/v1';\nimport { languageOptions, dictionaryList } from '../languages'; // create the language context with default selected language\n\nexport const LanguageContext = createContext({\n  language: languageOptions[0],\n  dictionary: dictionaryList[languageOptions[0].id]\n}); // it provides the language context to app\n\nexport function LanguageContextProvider(props) {\n  const languageContext = useContext(LanguageContext);\n  const [language, setLanguage] = useState(languageContext.language);\n  const [dictionary, setDictionary] = useState(languageContext.dictionary);\n  const provider = {\n    language,\n    dictionary,\n    setLanguage: selectedLanguage => {\n      setLanguage(selectedLanguage); // it will update the language in state\n\n      setDictionary(dictionaryList[selectedLanguage.id]);\n    }\n  };\n  return React.createElement(LanguageContextProvider, {\n    value: provider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, props.children);\n}\n;","map":{"version":3,"sources":["/Users/kawabata/Desktop/currentprojects/bz-unit-converter/brasil-unit-converter/src/contexts/LanguageContext.js"],"names":["React","createContext","useState","uuid","languageOptions","dictionaryList","LanguageContext","language","dictionary","id","LanguageContextProvider","props","languageContext","useContext","setLanguage","setDictionary","provider","selectedLanguage","children"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,cAAhD,C,CAEA;;AACA,OAAO,MAAMC,eAAe,GAAGL,aAAa,CAAC;AACzCM,EAAAA,QAAQ,EAAEH,eAAe,CAAC,CAAD,CADgB;AAEzCI,EAAAA,UAAU,EAAEH,cAAc,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmBK,EAApB;AAFe,CAAD,CAArC,C,CAKP;;AACA,OAAO,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AAC3C,QAAMC,eAAe,GAAGC,UAAU,CAACP,eAAD,CAAlC;AACA,QAAM,CAACC,QAAD,EAAWO,WAAX,IAA0BZ,QAAQ,CAACU,eAAe,CAACL,QAAjB,CAAxC;AACA,QAAM,CAACC,UAAD,EAAaO,aAAb,IAA8Bb,QAAQ,CAACU,eAAe,CAACJ,UAAjB,CAA5C;AAEA,QAAMQ,QAAQ,GAAG;AACbT,IAAAA,QADa;AAEbC,IAAAA,UAFa;AAGbM,IAAAA,WAAW,EAAGG,gBAAD,IAAsB;AAC/BH,MAAAA,WAAW,CAACG,gBAAD,CAAX,CAD+B,CACA;;AAC/BF,MAAAA,aAAa,CAACV,cAAc,CAACY,gBAAgB,CAACR,EAAlB,CAAf,CAAb;AACH;AANY,GAAjB;AASA,SACI,oBAAC,uBAAD;AAAyB,IAAA,KAAK,EAAEO,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,KAAK,CAACO,QADX,CADJ;AAKH;AAAA","sourcesContent":["\nimport React, { createContext, useState } from 'react';\nimport uuid from 'uuid/v1';\n\nimport { languageOptions, dictionaryList } from '../languages';\n\n// create the language context with default selected language\nexport const LanguageContext = createContext({\n    language: languageOptions[0],\n    dictionary: dictionaryList[languageOptions[0].id]\n});\n\n// it provides the language context to app\nexport function LanguageContextProvider(props) {\n    const languageContext = useContext(LanguageContext);\n    const [language, setLanguage] = useState(languageContext.language);\n    const [dictionary, setDictionary] = useState(languageContext.dictionary);\n\n    const provider = {\n        language,\n        dictionary,\n        setLanguage: (selectedLanguage) => {\n            setLanguage(selectedLanguage); // it will update the language in state\n            setDictionary(dictionaryList[selectedLanguage.id]);\n        }\n    };\n\n    return (\n        <LanguageContextProvider value={provider}>\n            {props.children}\n        </LanguageContextProvider>\n    );\n};"]},"metadata":{},"sourceType":"module"}