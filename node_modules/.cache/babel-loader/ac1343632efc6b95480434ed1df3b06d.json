{"ast":null,"code":"// import React, { useContext } from 'react';\n// import { languageOptions } from '../languages';\n// import { LanguageContext } from '../contexts/LanguageContext';\n// const LanguageSelect = () => {\n//     const languageContext = useContext(LanguageContext);\n//     const handleLanguageChange = (event) => {\n//         const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n//         // set selected language by calling context method\n//         languageContext.setLanguage(selectedLanguage);\n//     };\n//     return (\n//         <section className='language-select'>\n//             <h2>\n//                 Choose Language\n//             </h2>\n//             <select \n//                 onChange={handleLanguageChange}\n//                 value={languageContext.language.id}\n//             >\n//                 {languageOptions.map(item => (\n//                     <option\n//                         key={item.id}\n//                         value={item.id}\n//                     >\n//                         {item.text}\n//                     </option>\n//                 ))}\n//             </select>\n//         </section>\n//     );\n// };\n// export default LanguageSelect;\nimport React,{useContext}from'react';import{languageOptions}from'../languages';import{LanguageContext}from'../contexts/LanguageContext';var LanguageSelect=function LanguageSelect(){var languageContext=useContext(LanguageContext);var selectedLanguage=languageContext.language.id;var handleLanguageChange=function handleLanguageChange(event){var selectedLanguage=languageOptions.find(function(item){return item.id===event.target.value;});// set selected language by calling context method\nlanguageContext.setLanguage(selectedLanguage);};// const toggleLanguage = (event) => {\n//     // const selectedLanguage = languageContext.language.id === 0? 1 : 0;\n//     // const currLanguage = languageContext.language.id;\n//     // const selectedLanguage = currLanguage === 'en'? 'pt' : 'en';\n//     console.log(event.target.value==='en');\n//     if (event.target.value === 'en') {\n//          selectedLanguage = 'pt';\n//     } else {\n//          selectedLanguage = 'en';\n//     }\n//     console.log(selectedLanguage);\n//     // const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n//     // set selected language by calling context method\n//     languageContext.setLanguage(selectedLanguage);\n// };\nreturn React.createElement(\"section\",{className:\"language-select\"},React.createElement(\"h2\",null,\"Choose Language\"),React.createElement(\"select\",{onChange:handleLanguageChange,value:languageContext.language.id},languageOptions.map(function(item){return React.createElement(\"option\",{key:item.id,value:item.id},item.text);})));};export default LanguageSelect;","map":{"version":3,"sources":["/Users/kawabata/Desktop/currentprojects/bz-unit-converter/brasil-unit-converter/src/components/LanguageSelect.js"],"names":["React","useContext","languageOptions","LanguageContext","LanguageSelect","languageContext","selectedLanguage","language","id","handleLanguageChange","event","find","item","target","value","setLanguage","map","text"],"mappings":"AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAIA;AAGA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CAEA,OAASC,eAAT,KAAgC,cAAhC,CAEA,OAASC,eAAT,KAAgC,6BAAhC,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CACzB,GAAMC,CAAAA,eAAe,CAAGJ,UAAU,CAACE,eAAD,CAAlC,CACA,GAAIG,CAAAA,gBAAgB,CAAGD,eAAe,CAACE,QAAhB,CAAyBC,EAAhD,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,KAAD,CAAW,CACpC,GAAMJ,CAAAA,gBAAgB,CAAGJ,eAAe,CAACS,IAAhB,CAAqB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACJ,EAAL,GAAYE,KAAK,CAACG,MAAN,CAAaC,KAA7B,EAAzB,CAAzB,CACA;AACAT,eAAe,CAACU,WAAhB,CAA4BT,gBAA5B,EACH,CAJD,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MACI,gCAAS,SAAS,CAAC,iBAAnB,EAoBI,gDApBJ,CAuBI,8BACI,QAAQ,CAAEG,oBADd,CAEI,KAAK,CAAEJ,eAAe,CAACE,QAAhB,CAAyBC,EAFpC,EAIKN,eAAe,CAACc,GAAhB,CAAoB,SAAAJ,IAAI,QACrB,+BACI,GAAG,CAAEA,IAAI,CAACJ,EADd,CAEI,KAAK,CAAEI,IAAI,CAACJ,EAFhB,EAIKI,IAAI,CAACK,IAJV,CADqB,EAAxB,CAJL,CAvBJ,CADJ,CA0CH,CAtED,CAyEA,cAAeb,CAAAA,cAAf","sourcesContent":["\n// import React, { useContext } from 'react';\n\n// import { languageOptions } from '../languages';\n\n// import { LanguageContext } from '../contexts/LanguageContext';\n\n// const LanguageSelect = () => {\n//     const languageContext = useContext(LanguageContext);\n\n//     const handleLanguageChange = (event) => {\n//         const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n//         // set selected language by calling context method\n//         languageContext.setLanguage(selectedLanguage);\n//     };\n\n//     return (\n//         <section className='language-select'>\n//             <h2>\n//                 Choose Language\n//             </h2>\n//             <select \n//                 onChange={handleLanguageChange}\n//                 value={languageContext.language.id}\n//             >\n//                 {languageOptions.map(item => (\n//                     <option\n//                         key={item.id}\n//                         value={item.id}\n//                     >\n//                         {item.text}\n//                     </option>\n//                 ))}\n//             </select>\n\n\n//         </section>\n\n//     );\n// };\n\n\n\n// export default LanguageSelect;\n\n\nimport React, { useContext } from 'react';\n\nimport { languageOptions } from '../languages';\n\nimport { LanguageContext } from '../contexts/LanguageContext';\n\nconst LanguageSelect = () => {\n    const languageContext = useContext(LanguageContext);\n    let selectedLanguage = languageContext.language.id;\n\n    const handleLanguageChange = (event) => {\n        const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n        // set selected language by calling context method\n        languageContext.setLanguage(selectedLanguage);\n    };\n\n\n    // const toggleLanguage = (event) => {\n    //     // const selectedLanguage = languageContext.language.id === 0? 1 : 0;\n    //     // const currLanguage = languageContext.language.id;\n    //     // const selectedLanguage = currLanguage === 'en'? 'pt' : 'en';\n    //     console.log(event.target.value==='en');\n    //     if (event.target.value === 'en') {\n    //          selectedLanguage = 'pt';\n    //     } else {\n    //          selectedLanguage = 'en';\n    //     }\n    //     console.log(selectedLanguage);\n    //     // const selectedLanguage = languageOptions.find(item => item.id === event.target.value);\n    //     // set selected language by calling context method\n    //     languageContext.setLanguage(selectedLanguage);\n    // };\n\n\n    return (\n        <section className='language-select'>\n            {/* <h2>\n                Choose Language\n            </h2>\n            <input\n                // checked={isOn}\n                onChange={toggleLanguage}\n                className=\"react-switch-checkbox\"\n                id={selectedLanguage}\n                type=\"checkbox\"\n                value={selectedLanguage}\n            />\n            <label\n                className=\"react-switch-label\"\n                htmlFor={selectedLanguage}\n                \n            >\n                <span className={`react-switch-button`} />\n            </label> */}\n\n            <h2>\n                Choose Language\n            </h2>\n            <select\n                onChange={handleLanguageChange}\n                value={languageContext.language.id}\n            >\n                {languageOptions.map(item => (\n                    <option\n                        key={item.id}\n                        value={item.id}\n                    >\n                        {item.text}\n                    </option>\n                ))}\n            </select>\n\n\n        </section>\n\n    );\n};\n\n\nexport default LanguageSelect;"]},"metadata":{},"sourceType":"module"}